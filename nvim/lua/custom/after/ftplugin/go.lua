-- local golang_organise_imports = function(bufnr, isPreflight)
--   local params = vim.lsp.util.make_range_params(nil, vim.lsp.util._get_offset_encoding(bufnr))
--   params.context = { only = { "source.organizeImports" } }
--
--   if isPreflight then
--     vim.lsp.buf_request(bufnr, "textDocument/codeAction", params, function() end)
--     return
--   end
--
--   local result = vim.lsp.buf_request_sync(bufnr, "textDocument/codeAction", params, 1000)
--   for _, res in pairs(result or {}) do
--     for _, r in pairs(res.result or {}) do
--       if r.edit then
--         vim.lsp.util.apply_workspace_edit(r.edit, vim.lsp.util._get_offset_encoding(bufnr))
--       else
--         vim.lsp.buf.execute_command(r.command)
--       end
--     end
--   end
-- end
--
-- vim.api.nvim_create_autocmd("LspAttach", {
--   group = vim.api.nvim_create_augroup("LspCodeAction", {}),
--   callback = function(args)
--     local bufnr = args.buf
--     local client = vim.lsp.get_client_by_id(args.data.client_id)
--
--     if client.name == "gopls" then
--       -- HACK: Preform a preflight async request to gopls, to prevent
--       -- blocking when saving a buffer for the first time.
--       golang_organise_imports(bufnr, true)
--
--       vim.api.nvim_create_autocmd("BufWritePre", {
--         pattern = "*.go",
--         group = vim.api.nvim_create_augroup("LspGolangOrganizeImports." .. bufnr, {}),
--         callback = function()
--           golang_organise_imports(bufnr)
--         end,
--       })
--     end
--   end,
-- })
